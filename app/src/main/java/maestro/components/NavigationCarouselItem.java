/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package maestro.components;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class NavigationCarouselItem extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"NavigationCarouselItem\",\"namespace\":\"maestro.components\",\"fields\":[{\"name\":\"type\",\"type\":\"string\",\"default\":\"maestro.components.NavigationCarouselItem\"},{\"name\":\"label\",\"type\":\"string\"},{\"name\":\"image_url\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"link\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"DealCategory\",\"namespace\":\"maestro.common\",\"fields\":[{\"name\":\"type\",\"type\":\"string\",\"default\":\"maestro.common.DealCategory\"},{\"name\":\"category_id\",\"type\":\"int\"}]},{\"type\":\"record\",\"name\":\"BrowseCategory\",\"namespace\":\"maestro.common\",\"doc\":\"A Browse Category component describes a category of slots that can appear in the Browse Layout. A default category value of null will be used to render the Explore category of slots in the Browse Layout. Other category values of nearby, alphabetical, latest, favourites, and stackid_<id> (where <id> respresents the integer id value of a stack) will be used to render corresponding Nearby, A-Z, Latest, Favourites, and stack categories of slots.\",\"fields\":[{\"name\":\"type\",\"type\":\"string\",\"default\":\"maestro.common.BrowseCategory\"},{\"name\":\"category\",\"type\":\"string\"}]}]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public CharSequence type;
  @Deprecated public CharSequence label;
  @Deprecated public CharSequence image_url;
  @Deprecated public Object link;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public NavigationCarouselItem() {}

  /**
   * All-args constructor.
   */
  public NavigationCarouselItem(CharSequence type, CharSequence label, CharSequence image_url, Object link) {
    this.type = type;
    this.label = label;
    this.image_url = image_url;
    this.link = link;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public Object get(int field$) {
    switch (field$) {
    case 0: return type;
    case 1: return label;
    case 2: return image_url;
    case 3: return link;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, Object value$) {
    switch (field$) {
    case 0: type = (CharSequence)value$; break;
    case 1: label = (CharSequence)value$; break;
    case 2: image_url = (CharSequence)value$; break;
    case 3: link = (Object)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'type' field.
   */
  public CharSequence getType() {
    return type;
  }

  /**
   * Sets the value of the 'type' field.
   * @param value the value to set.
   */
  public void setType(CharSequence value) {
    this.type = value;
  }

  /**
   * Gets the value of the 'label' field.
   */
  public CharSequence getLabel() {
    return label;
  }

  /**
   * Sets the value of the 'label' field.
   * @param value the value to set.
   */
  public void setLabel(CharSequence value) {
    this.label = value;
  }

  /**
   * Gets the value of the 'image_url' field.
   */
  public CharSequence getImageUrl() {
    return image_url;
  }

  /**
   * Sets the value of the 'image_url' field.
   * @param value the value to set.
   */
  public void setImageUrl(CharSequence value) {
    this.image_url = value;
  }

  /**
   * Gets the value of the 'link' field.
   */
  public Object getLink() {
    return link;
  }

  /**
   * Sets the value of the 'link' field.
   * @param value the value to set.
   */
  public void setLink(Object value) {
    this.link = value;
  }

  /** Creates a new NavigationCarouselItem RecordBuilder */
  public static maestro.components.NavigationCarouselItem.Builder newBuilder() {
    return new maestro.components.NavigationCarouselItem.Builder();
  }

  /** Creates a new NavigationCarouselItem RecordBuilder by copying an existing Builder */
  public static maestro.components.NavigationCarouselItem.Builder newBuilder(maestro.components.NavigationCarouselItem.Builder other) {
    return new maestro.components.NavigationCarouselItem.Builder(other);
  }

  /** Creates a new NavigationCarouselItem RecordBuilder by copying an existing NavigationCarouselItem instance */
  public static maestro.components.NavigationCarouselItem.Builder newBuilder(maestro.components.NavigationCarouselItem other) {
    return new maestro.components.NavigationCarouselItem.Builder(other);
  }

  /**
   * RecordBuilder for NavigationCarouselItem instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<NavigationCarouselItem>
    implements org.apache.avro.data.RecordBuilder<NavigationCarouselItem> {

    private CharSequence type;
    private CharSequence label;
    private CharSequence image_url;
    private Object link;

    /** Creates a new Builder */
    private Builder() {
      super(maestro.components.NavigationCarouselItem.SCHEMA$);
    }

    /** Creates a Builder by copying an existing Builder */
    private Builder(maestro.components.NavigationCarouselItem.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.type)) {
        this.type = data().deepCopy(fields()[0].schema(), other.type);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.label)) {
        this.label = data().deepCopy(fields()[1].schema(), other.label);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.image_url)) {
        this.image_url = data().deepCopy(fields()[2].schema(), other.image_url);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.link)) {
        this.link = data().deepCopy(fields()[3].schema(), other.link);
        fieldSetFlags()[3] = true;
      }
    }

    /** Creates a Builder by copying an existing NavigationCarouselItem instance */
    private Builder(maestro.components.NavigationCarouselItem other) {
            super(maestro.components.NavigationCarouselItem.SCHEMA$);
      if (isValidValue(fields()[0], other.type)) {
        this.type = data().deepCopy(fields()[0].schema(), other.type);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.label)) {
        this.label = data().deepCopy(fields()[1].schema(), other.label);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.image_url)) {
        this.image_url = data().deepCopy(fields()[2].schema(), other.image_url);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.link)) {
        this.link = data().deepCopy(fields()[3].schema(), other.link);
        fieldSetFlags()[3] = true;
      }
    }

    /** Gets the value of the 'type' field */
    public CharSequence getType() {
      return type;
    }

    /** Sets the value of the 'type' field */
    public maestro.components.NavigationCarouselItem.Builder setType(CharSequence value) {
      validate(fields()[0], value);
      this.type = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /** Checks whether the 'type' field has been set */
    public boolean hasType() {
      return fieldSetFlags()[0];
    }

    /** Clears the value of the 'type' field */
    public maestro.components.NavigationCarouselItem.Builder clearType() {
      type = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'label' field */
    public CharSequence getLabel() {
      return label;
    }

    /** Sets the value of the 'label' field */
    public maestro.components.NavigationCarouselItem.Builder setLabel(CharSequence value) {
      validate(fields()[1], value);
      this.label = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /** Checks whether the 'label' field has been set */
    public boolean hasLabel() {
      return fieldSetFlags()[1];
    }

    /** Clears the value of the 'label' field */
    public maestro.components.NavigationCarouselItem.Builder clearLabel() {
      label = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'image_url' field */
    public CharSequence getImageUrl() {
      return image_url;
    }

    /** Sets the value of the 'image_url' field */
    public maestro.components.NavigationCarouselItem.Builder setImageUrl(CharSequence value) {
      validate(fields()[2], value);
      this.image_url = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /** Checks whether the 'image_url' field has been set */
    public boolean hasImageUrl() {
      return fieldSetFlags()[2];
    }

    /** Clears the value of the 'image_url' field */
    public maestro.components.NavigationCarouselItem.Builder clearImageUrl() {
      image_url = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'link' field */
    public Object getLink() {
      return link;
    }

    /** Sets the value of the 'link' field */
    public maestro.components.NavigationCarouselItem.Builder setLink(Object value) {
      validate(fields()[3], value);
      this.link = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /** Checks whether the 'link' field has been set */
    public boolean hasLink() {
      return fieldSetFlags()[3];
    }

    /** Clears the value of the 'link' field */
    public maestro.components.NavigationCarouselItem.Builder clearLink() {
      link = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    public NavigationCarouselItem build() {
      try {
        NavigationCarouselItem record = new NavigationCarouselItem();
        record.type = fieldSetFlags()[0] ? this.type : (CharSequence) defaultValue(fields()[0]);
        record.label = fieldSetFlags()[1] ? this.label : (CharSequence) defaultValue(fields()[1]);
        record.image_url = fieldSetFlags()[2] ? this.image_url : (CharSequence) defaultValue(fields()[2]);
        record.link = fieldSetFlags()[3] ? this.link : (Object) defaultValue(fields()[3]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
