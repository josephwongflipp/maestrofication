/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package maestro.components;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Header extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Header\",\"namespace\":\"maestro.components\",\"fields\":[{\"name\":\"type\",\"type\":\"string\",\"default\":\"maestro.components.Header\"},{\"name\":\"title\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"components\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"NavigationCarousel\",\"fields\":[{\"name\":\"type\",\"type\":\"string\",\"default\":\"maestro.components.NavigationCarousel\"},{\"name\":\"items\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"NavigationCarouselItem\",\"fields\":[{\"name\":\"type\",\"type\":\"string\",\"default\":\"maestro.components.NavigationCarouselItem\"},{\"name\":\"label\",\"type\":\"string\"},{\"name\":\"image_url\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"link\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"DealCategory\",\"namespace\":\"maestro.common\",\"fields\":[{\"name\":\"type\",\"type\":\"string\",\"default\":\"maestro.common.DealCategory\"},{\"name\":\"category_id\",\"type\":\"int\"}]},{\"type\":\"record\",\"name\":\"BrowseCategory\",\"namespace\":\"maestro.common\",\"doc\":\"A Browse Category component describes a category of slots that can appear in the Browse Layout. A default category value of null will be used to render the Explore category of slots in the Browse Layout. Other category values of nearby, alphabetical, latest, favourites, and stackid_<id> (where <id> respresents the integer id value of a stack) will be used to render corresponding Nearby, A-Z, Latest, Favourites, and stack categories of slots.\",\"fields\":[{\"name\":\"type\",\"type\":\"string\",\"default\":\"maestro.common.BrowseCategory\"},{\"name\":\"category\",\"type\":\"string\"}]}]}]}}},{\"name\":\"initial_item_index\",\"type\":[\"null\",\"int\"],\"default\":null}]}}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public CharSequence type;
  @Deprecated public CharSequence title;
  @Deprecated public java.util.List<NavigationCarousel> components;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Header() {}

  /**
   * All-args constructor.
   */
  public Header(CharSequence type, CharSequence title, java.util.List<NavigationCarousel> components) {
    this.type = type;
    this.title = title;
    this.components = components;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public Object get(int field$) {
    switch (field$) {
    case 0: return type;
    case 1: return title;
    case 2: return components;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, Object value$) {
    switch (field$) {
    case 0: type = (CharSequence)value$; break;
    case 1: title = (CharSequence)value$; break;
    case 2: components = (java.util.List<NavigationCarousel>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'type' field.
   */
  public CharSequence getType() {
    return type;
  }

  /**
   * Sets the value of the 'type' field.
   * @param value the value to set.
   */
  public void setType(CharSequence value) {
    this.type = value;
  }

  /**
   * Gets the value of the 'title' field.
   */
  public CharSequence getTitle() {
    return title;
  }

  /**
   * Sets the value of the 'title' field.
   * @param value the value to set.
   */
  public void setTitle(CharSequence value) {
    this.title = value;
  }

  /**
   * Gets the value of the 'components' field.
   */
  public java.util.List<NavigationCarousel> getComponents() {
    return components;
  }

  /**
   * Sets the value of the 'components' field.
   * @param value the value to set.
   */
  public void setComponents(java.util.List<NavigationCarousel> value) {
    this.components = value;
  }

  /** Creates a new Header RecordBuilder */
  public static maestro.components.Header.Builder newBuilder() {
    return new maestro.components.Header.Builder();
  }

  /** Creates a new Header RecordBuilder by copying an existing Builder */
  public static maestro.components.Header.Builder newBuilder(maestro.components.Header.Builder other) {
    return new maestro.components.Header.Builder(other);
  }

  /** Creates a new Header RecordBuilder by copying an existing Header instance */
  public static maestro.components.Header.Builder newBuilder(maestro.components.Header other) {
    return new maestro.components.Header.Builder(other);
  }

  /**
   * RecordBuilder for Header instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Header>
    implements org.apache.avro.data.RecordBuilder<Header> {

    private CharSequence type;
    private CharSequence title;
    private java.util.List<NavigationCarousel> components;

    /** Creates a new Builder */
    private Builder() {
      super(maestro.components.Header.SCHEMA$);
    }

    /** Creates a Builder by copying an existing Builder */
    private Builder(maestro.components.Header.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.type)) {
        this.type = data().deepCopy(fields()[0].schema(), other.type);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.title)) {
        this.title = data().deepCopy(fields()[1].schema(), other.title);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.components)) {
        this.components = data().deepCopy(fields()[2].schema(), other.components);
        fieldSetFlags()[2] = true;
      }
    }

    /** Creates a Builder by copying an existing Header instance */
    private Builder(maestro.components.Header other) {
            super(maestro.components.Header.SCHEMA$);
      if (isValidValue(fields()[0], other.type)) {
        this.type = data().deepCopy(fields()[0].schema(), other.type);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.title)) {
        this.title = data().deepCopy(fields()[1].schema(), other.title);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.components)) {
        this.components = data().deepCopy(fields()[2].schema(), other.components);
        fieldSetFlags()[2] = true;
      }
    }

    /** Gets the value of the 'type' field */
    public CharSequence getType() {
      return type;
    }

    /** Sets the value of the 'type' field */
    public maestro.components.Header.Builder setType(CharSequence value) {
      validate(fields()[0], value);
      this.type = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /** Checks whether the 'type' field has been set */
    public boolean hasType() {
      return fieldSetFlags()[0];
    }

    /** Clears the value of the 'type' field */
    public maestro.components.Header.Builder clearType() {
      type = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'title' field */
    public CharSequence getTitle() {
      return title;
    }

    /** Sets the value of the 'title' field */
    public maestro.components.Header.Builder setTitle(CharSequence value) {
      validate(fields()[1], value);
      this.title = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /** Checks whether the 'title' field has been set */
    public boolean hasTitle() {
      return fieldSetFlags()[1];
    }

    /** Clears the value of the 'title' field */
    public maestro.components.Header.Builder clearTitle() {
      title = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'components' field */
    public java.util.List<NavigationCarousel> getComponents() {
      return components;
    }

    /** Sets the value of the 'components' field */
    public maestro.components.Header.Builder setComponents(java.util.List<NavigationCarousel> value) {
      validate(fields()[2], value);
      this.components = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /** Checks whether the 'components' field has been set */
    public boolean hasComponents() {
      return fieldSetFlags()[2];
    }

    /** Clears the value of the 'components' field */
    public maestro.components.Header.Builder clearComponents() {
      components = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    public Header build() {
      try {
        Header record = new Header();
        record.type = fieldSetFlags()[0] ? this.type : (CharSequence) defaultValue(fields()[0]);
        record.title = fieldSetFlags()[1] ? this.title : (CharSequence) defaultValue(fields()[1]);
        record.components = fieldSetFlags()[2] ? this.components : (java.util.List<NavigationCarousel>) defaultValue(fields()[2]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
