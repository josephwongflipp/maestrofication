/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package maestro.components;  
@SuppressWarnings("all")
/** A Coordinates components describes a point of interest. Coordinates are specified with a lat, lon. */
@org.apache.avro.specific.AvroGenerated
public class Coordinates extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Coordinates\",\"namespace\":\"maestro.components\",\"doc\":\"A Coordinates components describes a point of interest. Coordinates are specified with a lat, lon.\",\"fields\":[{\"name\":\"type\",\"type\":\"string\",\"default\":\"maestro.components.Coordinates\"},{\"name\":\"lat\",\"type\":\"double\"},{\"name\":\"lon\",\"type\":\"double\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public CharSequence type;
  @Deprecated public double lat;
  @Deprecated public double lon;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Coordinates() {}

  /**
   * All-args constructor.
   */
  public Coordinates(CharSequence type, Double lat, Double lon) {
    this.type = type;
    this.lat = lat;
    this.lon = lon;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public Object get(int field$) {
    switch (field$) {
    case 0: return type;
    case 1: return lat;
    case 2: return lon;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, Object value$) {
    switch (field$) {
    case 0: type = (CharSequence)value$; break;
    case 1: lat = (Double)value$; break;
    case 2: lon = (Double)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'type' field.
   */
  public CharSequence getType() {
    return type;
  }

  /**
   * Sets the value of the 'type' field.
   * @param value the value to set.
   */
  public void setType(CharSequence value) {
    this.type = value;
  }

  /**
   * Gets the value of the 'lat' field.
   */
  public Double getLat() {
    return lat;
  }

  /**
   * Sets the value of the 'lat' field.
   * @param value the value to set.
   */
  public void setLat(Double value) {
    this.lat = value;
  }

  /**
   * Gets the value of the 'lon' field.
   */
  public Double getLon() {
    return lon;
  }

  /**
   * Sets the value of the 'lon' field.
   * @param value the value to set.
   */
  public void setLon(Double value) {
    this.lon = value;
  }

  /** Creates a new Coordinates RecordBuilder */
  public static maestro.components.Coordinates.Builder newBuilder() {
    return new maestro.components.Coordinates.Builder();
  }

  /** Creates a new Coordinates RecordBuilder by copying an existing Builder */
  public static maestro.components.Coordinates.Builder newBuilder(maestro.components.Coordinates.Builder other) {
    return new maestro.components.Coordinates.Builder(other);
  }

  /** Creates a new Coordinates RecordBuilder by copying an existing Coordinates instance */
  public static maestro.components.Coordinates.Builder newBuilder(maestro.components.Coordinates other) {
    return new maestro.components.Coordinates.Builder(other);
  }

  /**
   * RecordBuilder for Coordinates instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Coordinates>
    implements org.apache.avro.data.RecordBuilder<Coordinates> {

    private CharSequence type;
    private double lat;
    private double lon;

    /** Creates a new Builder */
    private Builder() {
      super(maestro.components.Coordinates.SCHEMA$);
    }

    /** Creates a Builder by copying an existing Builder */
    private Builder(maestro.components.Coordinates.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.type)) {
        this.type = data().deepCopy(fields()[0].schema(), other.type);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.lat)) {
        this.lat = data().deepCopy(fields()[1].schema(), other.lat);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.lon)) {
        this.lon = data().deepCopy(fields()[2].schema(), other.lon);
        fieldSetFlags()[2] = true;
      }
    }

    /** Creates a Builder by copying an existing Coordinates instance */
    private Builder(maestro.components.Coordinates other) {
            super(maestro.components.Coordinates.SCHEMA$);
      if (isValidValue(fields()[0], other.type)) {
        this.type = data().deepCopy(fields()[0].schema(), other.type);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.lat)) {
        this.lat = data().deepCopy(fields()[1].schema(), other.lat);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.lon)) {
        this.lon = data().deepCopy(fields()[2].schema(), other.lon);
        fieldSetFlags()[2] = true;
      }
    }

    /** Gets the value of the 'type' field */
    public CharSequence getType() {
      return type;
    }

    /** Sets the value of the 'type' field */
    public maestro.components.Coordinates.Builder setType(CharSequence value) {
      validate(fields()[0], value);
      this.type = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /** Checks whether the 'type' field has been set */
    public boolean hasType() {
      return fieldSetFlags()[0];
    }

    /** Clears the value of the 'type' field */
    public maestro.components.Coordinates.Builder clearType() {
      type = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'lat' field */
    public Double getLat() {
      return lat;
    }

    /** Sets the value of the 'lat' field */
    public maestro.components.Coordinates.Builder setLat(double value) {
      validate(fields()[1], value);
      this.lat = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /** Checks whether the 'lat' field has been set */
    public boolean hasLat() {
      return fieldSetFlags()[1];
    }

    /** Clears the value of the 'lat' field */
    public maestro.components.Coordinates.Builder clearLat() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'lon' field */
    public Double getLon() {
      return lon;
    }

    /** Sets the value of the 'lon' field */
    public maestro.components.Coordinates.Builder setLon(double value) {
      validate(fields()[2], value);
      this.lon = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /** Checks whether the 'lon' field has been set */
    public boolean hasLon() {
      return fieldSetFlags()[2];
    }

    /** Clears the value of the 'lon' field */
    public maestro.components.Coordinates.Builder clearLon() {
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    public Coordinates build() {
      try {
        Coordinates record = new Coordinates();
        record.type = fieldSetFlags()[0] ? this.type : (CharSequence) defaultValue(fields()[0]);
        record.lat = fieldSetFlags()[1] ? this.lat : (Double) defaultValue(fields()[1]);
        record.lon = fieldSetFlags()[2] ? this.lon : (Double) defaultValue(fields()[2]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
