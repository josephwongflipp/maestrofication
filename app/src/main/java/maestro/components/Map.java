/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package maestro.components;  
@SuppressWarnings("all")
/** A Map component describes a Geographical Map rendered within the Flipp App. A Map contains markers that can be plotted to indicate particular points of interest within the Map. */
@org.apache.avro.specific.AvroGenerated
public class Map extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Map\",\"namespace\":\"maestro.components\",\"doc\":\"A Map component describes a Geographical Map rendered within the Flipp App. A Map contains markers that can be plotted to indicate particular points of interest within the Map.\",\"fields\":[{\"name\":\"type\",\"type\":\"string\",\"default\":\"maestro.components.Map\"},{\"name\":\"markers\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"MapMarker\",\"doc\":\"A MapMarker components describes a point of interest within a Map component. A MapMarker is specified with coordinates as well as an optional marker_icon_url which points to an icon that will be used to render the point of interest within the Map.\",\"fields\":[{\"name\":\"type\",\"type\":\"string\",\"default\":\"maestro.components.MapMarker\"},{\"name\":\"coordinates\",\"type\":{\"type\":\"record\",\"name\":\"Coordinates\",\"doc\":\"A Coordinates components describes a point of interest. Coordinates are specified with a lat, lon.\",\"fields\":[{\"name\":\"type\",\"type\":\"string\",\"default\":\"maestro.components.Coordinates\"},{\"name\":\"lat\",\"type\":\"double\"},{\"name\":\"lon\",\"type\":\"double\"}]}},{\"name\":\"marker_icon_url\",\"type\":[\"null\",\"string\"],\"default\":null}]}}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public CharSequence type;
  @Deprecated public java.util.List<MapMarker> markers;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Map() {}

  /**
   * All-args constructor.
   */
  public Map(CharSequence type, java.util.List<MapMarker> markers) {
    this.type = type;
    this.markers = markers;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public Object get(int field$) {
    switch (field$) {
    case 0: return type;
    case 1: return markers;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, Object value$) {
    switch (field$) {
    case 0: type = (CharSequence)value$; break;
    case 1: markers = (java.util.List<MapMarker>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'type' field.
   */
  public CharSequence getType() {
    return type;
  }

  /**
   * Sets the value of the 'type' field.
   * @param value the value to set.
   */
  public void setType(CharSequence value) {
    this.type = value;
  }

  /**
   * Gets the value of the 'markers' field.
   */
  public java.util.List<MapMarker> getMarkers() {
    return markers;
  }

  /**
   * Sets the value of the 'markers' field.
   * @param value the value to set.
   */
  public void setMarkers(java.util.List<MapMarker> value) {
    this.markers = value;
  }

  /** Creates a new Map RecordBuilder */
  public static maestro.components.Map.Builder newBuilder() {
    return new maestro.components.Map.Builder();
  }

  /** Creates a new Map RecordBuilder by copying an existing Builder */
  public static maestro.components.Map.Builder newBuilder(maestro.components.Map.Builder other) {
    return new maestro.components.Map.Builder(other);
  }

  /** Creates a new Map RecordBuilder by copying an existing Map instance */
  public static maestro.components.Map.Builder newBuilder(maestro.components.Map other) {
    return new maestro.components.Map.Builder(other);
  }

  /**
   * RecordBuilder for Map instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Map>
    implements org.apache.avro.data.RecordBuilder<Map> {

    private CharSequence type;
    private java.util.List<MapMarker> markers;

    /** Creates a new Builder */
    private Builder() {
      super(maestro.components.Map.SCHEMA$);
    }

    /** Creates a Builder by copying an existing Builder */
    private Builder(maestro.components.Map.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.type)) {
        this.type = data().deepCopy(fields()[0].schema(), other.type);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.markers)) {
        this.markers = data().deepCopy(fields()[1].schema(), other.markers);
        fieldSetFlags()[1] = true;
      }
    }

    /** Creates a Builder by copying an existing Map instance */
    private Builder(maestro.components.Map other) {
            super(maestro.components.Map.SCHEMA$);
      if (isValidValue(fields()[0], other.type)) {
        this.type = data().deepCopy(fields()[0].schema(), other.type);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.markers)) {
        this.markers = data().deepCopy(fields()[1].schema(), other.markers);
        fieldSetFlags()[1] = true;
      }
    }

    /** Gets the value of the 'type' field */
    public CharSequence getType() {
      return type;
    }

    /** Sets the value of the 'type' field */
    public maestro.components.Map.Builder setType(CharSequence value) {
      validate(fields()[0], value);
      this.type = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /** Checks whether the 'type' field has been set */
    public boolean hasType() {
      return fieldSetFlags()[0];
    }

    /** Clears the value of the 'type' field */
    public maestro.components.Map.Builder clearType() {
      type = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'markers' field */
    public java.util.List<MapMarker> getMarkers() {
      return markers;
    }

    /** Sets the value of the 'markers' field */
    public maestro.components.Map.Builder setMarkers(java.util.List<MapMarker> value) {
      validate(fields()[1], value);
      this.markers = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /** Checks whether the 'markers' field has been set */
    public boolean hasMarkers() {
      return fieldSetFlags()[1];
    }

    /** Clears the value of the 'markers' field */
    public maestro.components.Map.Builder clearMarkers() {
      markers = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    public Map build() {
      try {
        Map record = new Map();
        record.type = fieldSetFlags()[0] ? this.type : (CharSequence) defaultValue(fields()[0]);
        record.markers = fieldSetFlags()[1] ? this.markers : (java.util.List<MapMarker>) defaultValue(fields()[1]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
