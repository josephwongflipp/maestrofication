/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package maestro.tests;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Tests extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Tests\",\"namespace\":\"maestro.tests\",\"fields\":[{\"name\":\"type\",\"type\":\"string\",\"default\":\"maestro.tests.Tests\"},{\"name\":\"global_tests\",\"type\":{\"type\":\"map\",\"values\":{\"type\":\"record\",\"name\":\"GlobalTest\",\"fields\":[{\"name\":\"type\",\"type\":\"string\",\"default\":\"maestro.tests.GlobalTest\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"in_test_group\",\"type\":\"boolean\"}]}},\"default\":{}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public CharSequence type;
  @Deprecated public java.util.Map<CharSequence,maestro.tests.GlobalTest> global_tests;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Tests() {}

  /**
   * All-args constructor.
   */
  public Tests(CharSequence type, java.util.Map<CharSequence,maestro.tests.GlobalTest> global_tests) {
    this.type = type;
    this.global_tests = global_tests;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public Object get(int field$) {
    switch (field$) {
    case 0: return type;
    case 1: return global_tests;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, Object value$) {
    switch (field$) {
    case 0: type = (CharSequence)value$; break;
    case 1: global_tests = (java.util.Map<CharSequence,maestro.tests.GlobalTest>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'type' field.
   */
  public CharSequence getType() {
    return type;
  }

  /**
   * Sets the value of the 'type' field.
   * @param value the value to set.
   */
  public void setType(CharSequence value) {
    this.type = value;
  }

  /**
   * Gets the value of the 'global_tests' field.
   */
  public java.util.Map<CharSequence,maestro.tests.GlobalTest> getGlobalTests() {
    return global_tests;
  }

  /**
   * Sets the value of the 'global_tests' field.
   * @param value the value to set.
   */
  public void setGlobalTests(java.util.Map<CharSequence,maestro.tests.GlobalTest> value) {
    this.global_tests = value;
  }

  /** Creates a new Tests RecordBuilder */
  public static maestro.tests.Tests.Builder newBuilder() {
    return new maestro.tests.Tests.Builder();
  }

  /** Creates a new Tests RecordBuilder by copying an existing Builder */
  public static maestro.tests.Tests.Builder newBuilder(maestro.tests.Tests.Builder other) {
    return new maestro.tests.Tests.Builder(other);
  }

  /** Creates a new Tests RecordBuilder by copying an existing Tests instance */
  public static maestro.tests.Tests.Builder newBuilder(maestro.tests.Tests other) {
    return new maestro.tests.Tests.Builder(other);
  }

  /**
   * RecordBuilder for Tests instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Tests>
    implements org.apache.avro.data.RecordBuilder<Tests> {

    private CharSequence type;
    private java.util.Map<CharSequence,maestro.tests.GlobalTest> global_tests;

    /** Creates a new Builder */
    private Builder() {
      super(maestro.tests.Tests.SCHEMA$);
    }

    /** Creates a Builder by copying an existing Builder */
    private Builder(maestro.tests.Tests.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.type)) {
        this.type = data().deepCopy(fields()[0].schema(), other.type);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.global_tests)) {
        this.global_tests = data().deepCopy(fields()[1].schema(), other.global_tests);
        fieldSetFlags()[1] = true;
      }
    }

    /** Creates a Builder by copying an existing Tests instance */
    private Builder(maestro.tests.Tests other) {
            super(maestro.tests.Tests.SCHEMA$);
      if (isValidValue(fields()[0], other.type)) {
        this.type = data().deepCopy(fields()[0].schema(), other.type);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.global_tests)) {
        this.global_tests = data().deepCopy(fields()[1].schema(), other.global_tests);
        fieldSetFlags()[1] = true;
      }
    }

    /** Gets the value of the 'type' field */
    public CharSequence getType() {
      return type;
    }

    /** Sets the value of the 'type' field */
    public maestro.tests.Tests.Builder setType(CharSequence value) {
      validate(fields()[0], value);
      this.type = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /** Checks whether the 'type' field has been set */
    public boolean hasType() {
      return fieldSetFlags()[0];
    }

    /** Clears the value of the 'type' field */
    public maestro.tests.Tests.Builder clearType() {
      type = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'global_tests' field */
    public java.util.Map<CharSequence,maestro.tests.GlobalTest> getGlobalTests() {
      return global_tests;
    }

    /** Sets the value of the 'global_tests' field */
    public maestro.tests.Tests.Builder setGlobalTests(java.util.Map<CharSequence,maestro.tests.GlobalTest> value) {
      validate(fields()[1], value);
      this.global_tests = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /** Checks whether the 'global_tests' field has been set */
    public boolean hasGlobalTests() {
      return fieldSetFlags()[1];
    }

    /** Clears the value of the 'global_tests' field */
    public maestro.tests.Tests.Builder clearGlobalTests() {
      global_tests = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    public Tests build() {
      try {
        Tests record = new Tests();
        record.type = fieldSetFlags()[0] ? this.type : (CharSequence) defaultValue(fields()[0]);
        record.global_tests = fieldSetFlags()[1] ? this.global_tests : (java.util.Map<CharSequence,maestro.tests.GlobalTest>) defaultValue(fields()[1]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
